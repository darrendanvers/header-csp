server {
  # Listen on port 3000.
  listen 3000;

  # All the HTML, JS, images, etc.
  location / {
    root /usr/share/nginx/html;
    index index.html;
    try_files $uri $uri/ /index.html =404;

    # Content-Security-Policy limits where the browser will pull files from.

    # This is very strict and will block anything not from this domain and will not allow inline
    # JavaScript to run. The code to set the "Loaded script.js" text runs, but the "Click Me!"
    # button does not work.
    #
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self'";

    # This is still strict, but a little less so. It allows JavaScript from the site's domain
    # and allows inline JavaScript. Now, the "Click Me!" button works.
    #
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'";

    # This is even more permissive. It blocks loading remote code and styles, but allows inline code
    # and running code with unsafe JavaScript functions. I'm not a fan of this one at all.
    #
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'";

    # This will allow the jQuery and this domain, but will still block the Bootstrap.
    #
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://code.jquery.com/";

    # This will allow the Bootstrap and this domain, but will still block the jQuery files.
    #
    # add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net/";

    # This will allow both jQuery and Bootstrap.
    #
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://code.jquery.com/; style-src 'self' https://cdn.jsdelivr.net/";
  }

  include /etc/nginx/extra-conf.d/*.conf;
}